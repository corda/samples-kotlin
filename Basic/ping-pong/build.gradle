import static org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_17
import static org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9



buildscript { //properties that you need to build the project

    Properties constants = new Properties()
    file("$projectDir/../constants.properties").withInputStream { constants.load(it) }

    ext {
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_core_release_group =  constants.getProperty("cordaCoreReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_core_release_version = constants.getProperty("cordaCoreVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        quasar_version = constants.getProperty("quasarVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_shell_version = constants.getProperty("cordaShellVersion")
        corda_platform_version = constants.getProperty("platformVersion").toInteger()
        //springboot
        spring_boot_version = '3.2.5'
        spring_boot_gradle_plugin_version = '3.2.5'
    }

    repositories {
        mavenLocal()
        mavenCentral()

        maven { url 'https://download.corda.net/maven/corda-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.0' // Or your Kotlin version

    id 'maven-publish'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.kotlin
        }
    }
    repositories {
        maven {
            println("Publishing to local repo")
            println("$buildDir/repo")
            url = uri("$buildDir/repo") // Local repo example
        }
    }
}
allprojects { //Properties that you need to compile your project (The application)
    apply from: "${rootProject.projectDir}/../repositories.gradle"
    apply plugin: 'org.jetbrains.kotlin.jvm'

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        compilerOptions {
            languageVersion = KOTLIN_1_9
            apiVersion = KOTLIN_1_9
            jvmTarget = JVM_17
            javaParameters = true   // Useful for reflection.
            freeCompilerArgs = ['-Xjvm-default=all-compatibility']
            allWarningsAsErrors = true
        }
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

//Module dependencis
dependencies {
    // Corda dependencies.
    cordaProvided "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaBootstrapper "$corda_release_group:corda-node-api:$corda_release_version"
    corda "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":workflows")

    cordaProvided "org.apache.logging.log4j:log4j-slf4j2-impl:${log4j_version}"
    cordaProvided "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaProvided "org.slf4j:jul-to-slf4j:$slf4j_version"
    cordaDriver "net.corda:corda-shell:$corda_shell_version"
    cordaDriver "org.postgresql:postgresql:42.2.19"

}

cordapp {
    targetPlatformVersion corda_platform_version.toInteger()
}

