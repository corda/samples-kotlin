import static org.gradle.jvm.toolchain.JavaLanguageVersion.of
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import net.corda.plugins.Dockerform

buildscript {
    configurations.classpath {
        // FORCE Gradle to use latest SNAPSHOT plugins.
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' apply false
    id 'net.corda.plugins.cordformation'
    id 'base'
}

subprojects { //Properties that you need to compile your project (The application)
    buildscript {
        configurations.classpath {
            // FORCE Gradle to use latest SNAPSHOT plugins.
            resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        }
    }

    pluginManager.withPlugin('java') {
        java {
            toolchain {
                languageVersion = of(8)
            }
        }
    }

    tasks.withType(KotlinCompile).configureEach {
        kotlinOptions {
            languageVersion = '1.2'
            apiVersion = '1.2'
            jvmTarget = '1.8'
            javaParameters = true   // Useful for reflection.
            freeCompilerArgs += [
                '-Xjvm-default=enable'
            ]
        }
    }

    configurations.matching { it.name.endsWith("Classpath") }.configureEach {
        resolutionStrategy {
            dependencySubstitution {
                substitute module('com.fasterxml.jackson.module:jackson-module-kotlin') with module("com.fasterxml.jackson.module:jackson-module-kotlin:2.9.7")
                substitute module('org.gradle:gradle-tooling-api') with module("org.gradle:gradle-tooling-api:${gradle.gradleVersion}")
            }
        }
    }
}

//Module dependencis
dependencies {
    cordaBootstrapper "$corda_release_group:corda-node-api:$corda_release_version"
    cordaBootstrapper "org.slf4j:slf4j-simple:$slf4j_version"
    corda "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(':contracts')
    cordapp project(':workflows')

    cordaDriver "$corda_release_group:corda-shell:$corda_release_version"
}

tasks.register('prepareDockerNodes', Dockerform) {
    dockerImage = "corda/corda-zulu-java1.8-" + corda_release_version + ":latest"

    nodeDefaults {
        cordapp project('contracts')
        cordapp project('workflows')
        runSchemaMigration = true
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: false]
        p2pPort 10001
        p2pAddress "0.0.0.0"
        rpcSettings {
            address("0.0.0.0:10011")
            adminAddress("0.0.0.0:10041")
        }
        rpcUsers = []
        sshdPort 2221
    }

    node {
        name "O=PartyA,L=London,C=GB"
        p2pPort 10002
        p2pAddress "0.0.0.0"
        rpcSettings {
            address("0.0.0.0:10012")
            adminAddress("0.0.0.0:10042")
        }
        sshdPort 2222
    }

    node {
        name "O=PartyB,L=New York,C=US"
        p2pPort 10003
        p2pAddress "0.0.0.0"
        rpcSettings {
            address("0.0.0.0:10013")
            adminAddress("0.0.0.0:10043")
        }
        sshdPort 2223
    }
}
