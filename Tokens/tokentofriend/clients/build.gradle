import com.moowork.gradle.node.npm.NpmTask

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'org.springframework.boot'
    id 'com.moowork.node'
}

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {
    implementation "com.google.code.gson:gson:$gson_version"

    // Corda dependencies.
    implementation "$corda_release_group:corda-rpc:$corda_release_version"

    // CorDapp dependencies.
    implementation project(':contracts')
    implementation project(':workflows')
    implementation("org.springframework.boot:spring-boot-starter-websocket:$spring_boot_version") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
    runtimeOnly "org.apache.logging.log4j:log4j-web:$log4j_version"
}

springBoot {
    mainClassName = "net.corda.samples.tokentofriend.webserver.ServerKt"
}

def appNpmInstall = tasks.create('appNpmInstall', NpmTask) {
    description = "Installs all dependencies from package.json"
    workingDir = file("$projectDir/src/main/webapp")
    args = ["install"]
}

def appNpmBuild = tasks.create('appNpmBuild', NpmTask) {
    dependsOn appNpmInstall
    description = "Builds production version of the webapp"
    workingDir = file("$projectDir/src/main/webapp")
    args = ["run", "build"]
}

tasks.register('copyWebApp', Copy) {
    dependsOn appNpmBuild
    from 'src/main/webapp/build'
    into 'build/resources/main/static/.'
}

tasks.named('compileJava', JavaCompile) {
    dependsOn copyWebApp
}

node {
    download = true

    // Set the work directory for unpacking node
    workDir = file("$buildDir/nodejs")

    // Set the work directory for NPM
    npmWorkDir = file("$buildDir/npm")
}

/* The Client is the communication channel between the external and the node. This task will help you immediately
 * execute your rpc methods in the main method of the client.kt. You can somewhat see this as a quick test of making
 * RPC calls to your nodes.
 */
tasks.register('runOperatorClient', JavaExec) {
    dependsOn assemble
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.samples.tokentofriend.ClientKt'
    args 'localhost:10006', 'user1', 'test'
}

/* This task will start the springboot server that connects to your node (via RPC connection). All of the http requests
 * are in the Controller file. You can leave the Server.kt and NodeRPCConnection.kt file untouched for your use.
 */
tasks.register('runOperatoreServer', JavaExec) {
    dependsOn assemble
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.samples.tokentofriend.webserver.ServerKt'
    args '--server.port=10050', '--config.rpc.host=localhost', '--config.rpc.port=10006', '--config.rpc.username=user1', '--config.rpc.password=test'
}

/* This task will start the springboot server that connects to your node (via RPC connection). All of the http requests
 * are in the Controller file. You can leave the Server.kt and NodeRPCConnection.kt file untouched for your use.
 */
tasks.register('runUSWest1Server', JavaExec) {
    dependsOn assemble
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.samples.tokentofriend.webserver.ServerKt'
    args '--server.port=10053', '--config.rpc.host=localhost', '--config.rpc.port=10015', '--config.rpc.username=user1', '--config.rpc.password=test'
}
