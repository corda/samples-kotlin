import static org.jetbrains.kotlin.gradle.dsl.JvmTarget.JVM_17
import static org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9

buildscript {
    Properties constants = new Properties()
    file("$projectDir/../constants.properties").withInputStream { constants.load(it) }

    ext {
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_core_release_group =  constants.getProperty("cordaCoreReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_core_release_version = constants.getProperty("cordaCoreVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        quasar_version = constants.getProperty("quasarVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_platform_version = constants.getProperty("platformVersion").toInteger()
        solana4j_version = constants.getProperty("solana4jVersion")

        //token
        tokens_release_group = 'com.r3.corda.lib.tokens'
        tokens_release_version = '1.3'


        testJvmArgs = ['--add-opens', 'java.base/java.time=ALL-UNNAMED', '--add-opens', 'java.base/java.io=ALL-UNNAMED',
                       '--add-opens', 'java.base/java.util=ALL-UNNAMED', '--add-opens', 'java.base/java.net=ALL-UNNAMED',
                       '--add-opens', 'java.base/java.nio=ALL-UNNAMED', '--add-opens', 'java.base/java.lang.invoke=ALL-UNNAMED',
                       '--add-opens', 'java.base/java.security.cert=ALL-UNNAMED', '--add-opens', 'java.base/java.security=ALL-UNNAMED',
                       '--add-opens', 'java.base/javax.net.ssl=ALL-UNNAMED', '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
                       '--add-opens', 'java.base/java.util.concurrent=ALL-UNNAMED', '--add-opens', 'java.sql/java.sql=ALL-UNNAMED',]
    }

    repositories {
        mavenLocal()
        mavenCentral()

        maven { url 'https://download.corda.net/maven/corda-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"

    }
}

allprojects {
    apply from: "${rootProject.projectDir}/repositories.gradle"
    apply plugin: 'kotlin'

    tasks.withType(Test) {
        jvmArgs = rootProject.ext.testJvmArgs
    }

    repositories {
        mavenLocal()

        mavenCentral()
        maven { url 'https://download.corda.net/maven/corda-dependencies' }
        maven { url 'https://download.corda.net/maven/corda-releases' }
        maven { url 'https://jitpack.io' }
        //SDK lib
        maven { url 'https://download.corda.net/maven/corda-lib' }
        //Gradle Plugins
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }

        //for com.r3.libs:r3-libs-obfuscator:1.4.1 required by corda-node-driver
        maven {
            url "https://software.r3.com/artifactory/r3-corda-releases"
            authentication {
                basic(BasicAuthentication)
            }
            credentials {
                username = findProperty('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
                password = findProperty('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
            }
            content {
                includeGroup 'com.r3.libs'
                includeModule 'com.r3.corda', 'corda-shell'
            }
            mavenContent {
                releasesOnly()
            }
        }

        // For SNAPSHOT version
        maven {
            url "https://software.r3.com/artifactory/r3-corda-dev"
            authentication {
                basic(BasicAuthentication)
            }
            credentials {
                username = findProperty('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
                password = findProperty('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
            }
            content {
                includeGroup 'com.r3.libs'
                includeModule 'com.r3.corda', 'corda-shell'
            }
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        compilerOptions {
            languageVersion = KOTLIN_1_9
            apiVersion = KOTLIN_1_9
            jvmTarget = JVM_17
            javaParameters = true   // Useful for reflection.
        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    compileJava {
        options.compilerArgs << '-parameters'
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {
    // Corda dependencies.
    cordaProvided "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaBootstrapper ("$corda_release_group:corda-node-api:$corda_release_version") {
        exclude group: "ch.qos.logback", module: "logback-classic"
    }
    corda "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":workflows")
    cordapp project(":contracts")
    cordapp project(":bridging-setup")

    cordapp project(":bridging-contracts") // Used in the test
    cordapp project(":bridging-flows") // Used in the test

    cordaProvided "org.apache.logging.log4j:log4j-slf4j2-impl:${log4j_version}"
    cordaProvided "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaProvided "org.slf4j:jul-to-slf4j:$slf4j_version"
    cordaDriver "com.r3.corda:corda-shell:$corda_release_version"
    // Token SDK dependencies.
    cordapp "$tokens_release_group:tokens-contracts:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-workflows:$tokens_release_version"
}

cordapp {
    targetPlatformVersion corda_platform_version.toInteger()
    minimumPlatformVersion corda_platform_version.toInteger()
}

//TODO for now set manually path to solana-aggregator
def solanaAgregatorPath = "<PATH_TO_SLANA_GGREGATOR>"
def solanaNotaryKeyPath = "${solanaAgregatorPath}/notary-program/dev-keys/DevNMdtQW3Q4ybKQvxgwpJj84h5mb7JE218qTpZQnoA3.json"
def custodiedKeysDirectory = "${project.buildDir}/nodes/custodied-keys"
def keysDirectory = "${project.buildDir}/nodes/solana-keys"
def funderKeyFile = "${solanaAgregatorPath}/notary-program/dev-keys/DevNMdtQW3Q4ybKQvxgwpJj84h5mb7JE218qTpZQnoA3.json"
def bigBankWallet = "${keysDirectory}/big-corp-wallet.json"
def bridgeAuthorityWallet = "${custodiedKeysDirectory}/bridge-authority-wallet.json"
def tokenMintFile = "${keysDirectory}/tokenMint.pub"
def bigBankAccount = "${keysDirectory}/big-corp-token.pub"
def solanaUrl = "https://api.devnet.solana.com"
//TODO ser a task parmeter?
def linearId = '6116560b-c78e-4e13-871d-d666a5d032a3'

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp("$tokens_release_group:tokens-contracts:$tokens_release_version")
        cordapp("$tokens_release_group:tokens-workflows:$tokens_release_version")
        cordapp project(':contracts')
        cordapp project(':workflows')
	    runSchemaMigration = true
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating      : false,
                  serviceLegalName: "O=Notary Service,L=Zurich,C=CH",
                  solana          : [
                          notaryKeypairFile: file(solanaNotaryKeyPath).absolutePath,
                          custodiedKeysDir : file(custodiedKeysDirectory).absolutePath,
                          rpcUrl           : "https://api.devnet.solana.com"
                  ]
        ]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10033")
        }
    }
    node {
        name "O=WayneCo,L=SF,C=US"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10036")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Shareholder,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10039")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Bank,L=Washington DC,C=US"
        p2pPort 10012
        rpcSettings {
            address("localhost:10013")
            adminAddress("localhost:10043")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Observer,L=Washington DC,C=US"
        p2pPort 10015
        rpcSettings {
            address("localhost:10016")
            adminAddress("localhost:10046")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Bridging Authority,L=New York,C=US"
        p2pPort 10018
        rpcSettings {
            address("localhost:10019")
            adminAddress("localhost:10047")
        }
        cordapp(project(':bridging-contracts'))
        cordapp(project(':bridging-flows')) {
            // TODO manual step needed for now - repace placeholders <> with value after deployNodes, before runnnodes
            config """\
                participants = { "O=WayneCo,L=SF,C=US" = "<bigBankWallet>" }
                mints = { "${linearId}" = "<tokenMintFile>" }
                mintAuthorities = { "${linearId}" = "<bridgeAuthorityWallet>" }
            """
        }
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}

task installQuasar(type: Copy) {
    destinationDir rootProject.file("lib")
    from(configurations.quasar) {
        rename 'quasar-core(.*).jar', 'quasar.jar'
    }
}

tasks.register('createWallets') {
    "solana-keygen new -o ${bridgeAuthorityWallet} --no-bip39-passphrase -f".execute()
    "solana-keygen new -o ${bigBankWallet} --no-bip39-passphrase -f".execute()
}

tasks.register("fundAuthorityWallet", JavaExec) {
    dependsOn('createWallets')
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'net.corda.bank.BridgingSetup'

    args '--rpcUrl'
    args "${solanaUrl}"
    args '--role'
    args 'FUND_WALLET'
    args '--quantity'
    args 1
    args '--funder'
    args "${funderKeyFile}"
    args '--target'
    args "${bridgeAuthorityWallet}"
}

tasks.register("createTokenMint", JavaExec) {
    dependsOn('fundAuthorityWallet')
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'net.corda.bank.BridgingSetup'

    args '--rpcUrl'
    args "${solanaUrl}"
    args '--role'
    args 'CREATE_TOKEN'
    args '--funder'
    args "${bridgeAuthorityWallet}"
    args '--mint'
    args "${tokenMintFile}"
}

tasks.register("fundBigBankWallet", JavaExec) {
    dependsOn('createWallets')
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'net.corda.bank.BridgingSetup'

    args '--rpcUrl'
    args "${solanaUrl}"
    args '--role'
    args 'FUND_WALLET'
    args '--quantity'
    args 1
    args '--funder'
    args "${funderKeyFile}"
    args '--target'
    args "${bigBankWallet}"
}

tasks.register("createTokenAccount", JavaExec) {
    dependsOn('createTokenMint', 'fundAuthorityWallet', 'fundBigBankWallet')
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'net.corda.bank.BridgingSetup'

    args '--rpcUrl'
    args "${solanaUrl}"
    args '--role'
    args 'CREATE_TOKEN_ACCOUNT'
    args '--funder'
    args "${bigBankWallet}"
    args '--mint'
    args "${tokenMintFile}"
    args '--account'
    args "${bigBankAccount}"
}

tasks.register("setupBridging") {
    dependsOn('createTokenAccount', 'createTokenMint', 'fundAuthorityWallet', 'fundBigBankWallet', 'createWallets')
}